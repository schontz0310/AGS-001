#include <Arduino.h>
#include <ArduinoUniqueID.h>
#include <MFRC522.h>   
#include "U8glib.h"
#include <Wire.h>                 // Biblioteca de comunicação I2C
#include <TimeLib.h>              // Biclioteca de configuração de data e hota 
#include <DS1307RTC.h>            // Biblioteca de integração com o modulo RTC
#include <SD.h>                   // SD Card Biblioteca

#ifndef _Utils_H
#define _Utils_H

const uint8_t RST_PIN           =       10;                                   // Configuravel - Pino Reset modulo RFID
const uint8_t SS_SDA_PIN        =       4;                                    // Configuravel - Pino Slave Select (SDA) modulo RFID

const uint8_t img_bitmap[] U8G_PROGMEM = 
{

  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xff, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0x1f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0,
  0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xf0, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc,
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xf8, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xf8, 0xff,
  0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff,
  0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xc0, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0x3f, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0xff, 0xf8, 0xff,
  0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff,
  0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xf8, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0x0f,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff,
  0xff, 0xff, 0xff, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff,
  0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,
  0x00, 0xe0, 0xff, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff,
  0x03, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x03,
  0x00, 0x80, 0xff, 0xff, 0x0f, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff,
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0x3f, 0x00, 0x00, 0x00,
  0x00, 0xfc, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xff,
  0x7f, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xff, 0xff, 0xfc, 0xff, 0x00, 0x00,
  0x00, 0x00, 0xe0, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x7f,
  0xf8, 0xff, 0x00, 0x00, 0x00, 0x00, 0x80, 0xff, 0x3f, 0x00, 0x00, 0x00,
  0x80, 0xff, 0xff, 0x3f, 0xf0, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe,
  0x1f, 0x00, 0x00, 0x00, 0xc0, 0xff, 0xff, 0x1f, 0xe0, 0xff, 0x00, 0x00,
  0x00, 0x00, 0x00, 0xf8, 0x0f, 0x00, 0x00, 0x00, 0xe0, 0xff, 0xff, 0x0f,
  0xc0, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00,
  0xf0, 0xff, 0xff, 0x07, 0xc0, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80,
  0x03, 0x00, 0x00, 0x00, 0xf8, 0xff, 0xff, 0x03, 0xfc, 0xff, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0xff, 0xff, 0x01,
  0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xfc, 0xff, 0xff, 0xc0, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xf8, 0xff, 0x7f, 0xe0, 0x07, 0xfe, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf0, 0xff, 0x3f, 0xe0,
  0x01, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xe1, 0xff, 0x1f, 0xf0, 0x00, 0xf8, 0x00, 0xff, 0x0f, 0xe0, 0x3f, 0x00,
  0x00, 0x00, 0x00, 0x00, 0xc3, 0xff, 0x0f, 0x70, 0x00, 0xfc, 0x00, 0xff,
  0x1f, 0xf8, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0xff, 0x07, 0x78,
  0x00, 0x7e, 0x00, 0xff, 0x3f, 0xfc, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x0f, 0xff, 0x03, 0x38, 0x00, 0x3f, 0x00, 0xff, 0x3f, 0xfe, 0xff, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x1f, 0xfe, 0x01, 0x3c, 0x80, 0x1f, 0x00, 0xff,
  0x3f, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xfc, 0x00, 0x3c,
  0xc0, 0x0f, 0x00, 0xff, 0x1f, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x7f, 0xf8, 0x00, 0x1e, 0xe0, 0x07, 0x00, 0x3f, 0x80, 0x3f, 0x30, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x7f, 0xf0, 0x01, 0x1e, 0xf0, 0x03, 0x00, 0x3f,
  0x80, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xe0, 0x03, 0x0e,
  0xf8, 0x01, 0x00, 0x3f, 0x80, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x1f, 0xc0, 0x07, 0x0e, 0xfc, 0x00, 0x00, 0x3f, 0xc0, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x0f, 0x06, 0x7e, 0x00, 0x00, 0x3f,
  0xc0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x1f, 0x00,
  0x3f, 0x00, 0x00, 0x3f, 0xc0, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x03, 0x00, 0x3e, 0x80, 0x1f, 0x00, 0x00, 0x1f, 0xc0, 0x0f, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x7c, 0xc0, 0x0f, 0x00, 0x00, 0x00,
  0xc0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf8, 0xe0,
  0x07, 0x00, 0x00, 0x00, 0xe0, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0xf0, 0xff, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x63, 0x3c, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0xff, 0x01, 0x00, 0x00, 0x00,
  0xfe, 0xf3, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f,
  0x00, 0x00, 0x00, 0x00, 0xfe, 0xf9, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0xfe, 0xf9, 0xff, 0x01,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0xfe, 0xf8, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x3e, 0xf0, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x80, 0x03, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00

};


enum statusSound 
{
  sound_ok,
  sound_error
};

class Som 
{
  public:
    Som (int pinBuzzer);
    void somCerto(int pinLed, int interval);
    void somErrado(int pinLed, int firstInterval, int lastInterval); 

  private:
    int _pinLed;
    int _pinBuzzer;
    int _time;
    int _interval;
    int _firstInterval;
    int _lastInterval;
};

class UID 
{
  public:
    UID ();
    String getUID();
  private:
    String _uid;
};

enum ScreenName
{
  SCREEN_DRAW_LOGO,
  SCREEN_INIT,
  SCREEN_VERIFY_DATA_LOGGER_SD,
  SCREEN_VERIFY_DATA_LOGGER_RTC,
  SCREEN_VERIFY_RFID,
};

class DrawScreen 
{
  public:
    DrawScreen ();
    void begin();
    void drawSetup(ScreenName screen, int interval, uint8_t status, bool estado[]);
  private:
    ScreenName _screen;
    uint8_t _status;
    bool _state[8];
    int _interval;
    char _buffer[24];
};

enum RFIDStatus
{
  RFID_OK,
  RFID_ERROR,
};

class RFIDReader 
{
  public:
    RFIDReader ();
    RFIDStatus begin();
  private:
    bool _result;
};

enum DataLoggerStatus
{
  DATALOGGER_SD_OK,
  DATALOGGER_SD_ERROR,
  DATALOGGER_TIME_OK,
  DATALOGGER_TIME_ERROR,
  DATALOGGER_READY,
};

class DatalLogger
{
  public:
    DatalLogger();
    DataLoggerStatus begin(uint8_t pin_ss_datalogger);
    DataLoggerStatus setSystemTimestamp();
    DataLoggerStatus getDateHour();
  private:
    bool getDate(const char *str);
    bool getTime(const char *str);
    String get2digits(int number);
    String getTimestamp();
    uint8_t _pin_ss_datalogger;
};

#endif 
